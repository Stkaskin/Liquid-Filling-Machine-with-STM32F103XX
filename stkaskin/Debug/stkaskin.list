
stkaskin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a58  08002a58  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002a58  08002a58  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a58  08002a58  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000088  08002ae8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002ae8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d7b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ea  00000000  00000000  00026e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00028518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00028c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f07  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a67  00000000  00000000  0004022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080591  00000000  00000000  00049c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  000ca278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080029a4 	.word	0x080029a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080029a4 	.word	0x080029a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <keypad_init>:

//


void keypad_init(void)
{		
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure; 
	/********************** Init GPIO Keypad *************************/
 	// aktivasi Kolom bit
	GPIO_InitStructure.Pin = C1_PIN|C2_PIN|C3_PIN|C4_PIN;
 8000162:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000166:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000168:	2300      	movs	r3, #0
 800016a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800016c:	2303      	movs	r3, #3
 800016e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000170:	2301      	movs	r3, #1
 8000172:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000174:	463b      	mov	r3, r7
 8000176:	4619      	mov	r1, r3
 8000178:	4816      	ldr	r0, [pc, #88]	; (80001d4 <keypad_init+0x78>)
 800017a:	f001 f84f 	bl	800121c <HAL_GPIO_Init>
	
	// aktivasi Baris bit
	GPIO_InitStructure.Pin = R1_PIN|R2_PIN|R3_PIN|R4_PIN;
 800017e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000182:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000184:	2301      	movs	r3, #1
 8000186:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000188:	2303      	movs	r3, #3
 800018a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000190:	463b      	mov	r3, r7
 8000192:	4619      	mov	r1, r3
 8000194:	4810      	ldr	r0, [pc, #64]	; (80001d8 <keypad_init+0x7c>)
 8000196:	f001 f841 	bl	800121c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA,R1_PIN,GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a0:	480d      	ldr	r0, [pc, #52]	; (80001d8 <keypad_init+0x7c>)
 80001a2:	f001 f9ce 	bl	8001542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,R2_PIN,GPIO_PIN_SET);
 80001a6:	2201      	movs	r2, #1
 80001a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ac:	480a      	ldr	r0, [pc, #40]	; (80001d8 <keypad_init+0x7c>)
 80001ae:	f001 f9c8 	bl	8001542 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,R3_PIN,GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b8:	4807      	ldr	r0, [pc, #28]	; (80001d8 <keypad_init+0x7c>)
 80001ba:	f001 f9c2 	bl	8001542 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,R4_PIN,GPIO_PIN_SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <keypad_init+0x7c>)
 80001c6:	f001 f9bc 	bl	8001542 <HAL_GPIO_WritePin>
/********************** End GPIO LCD ********************/
}
 80001ca:	bf00      	nop
 80001cc:	3710      	adds	r7, #16
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	40010800 	.word	0x40010800

080001dc <keypad_get_key_value>:


char keypad_get_key_value(void)
{     int key;
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
			key=' ';
 80001e2:	2320      	movs	r3, #32
 80001e4:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R1_PIN,GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ec:	4875      	ldr	r0, [pc, #468]	; (80003c4 <keypad_get_key_value+0x1e8>)
 80001ee:	f001 f9a8 	bl	8001542 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80001f2:	200a      	movs	r0, #10
 80001f4:	f000 fee0 	bl	8000fb8 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '1'; 
 80001f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fc:	4872      	ldr	r0, [pc, #456]	; (80003c8 <keypad_get_key_value+0x1ec>)
 80001fe:	f001 f989 	bl	8001514 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d102      	bne.n	800020e <keypad_get_key_value+0x32>
 8000208:	2331      	movs	r3, #49	; 0x31
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	e01f      	b.n	800024e <keypad_get_key_value+0x72>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='2';
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	486d      	ldr	r0, [pc, #436]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000214:	f001 f97e 	bl	8001514 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d102      	bne.n	8000224 <keypad_get_key_value+0x48>
 800021e:	2332      	movs	r3, #50	; 0x32
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e014      	b.n	800024e <keypad_get_key_value+0x72>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='3';
 8000224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000228:	4867      	ldr	r0, [pc, #412]	; (80003c8 <keypad_get_key_value+0x1ec>)
 800022a:	f001 f973 	bl	8001514 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d102      	bne.n	800023a <keypad_get_key_value+0x5e>
 8000234:	2333      	movs	r3, #51	; 0x33
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	e009      	b.n	800024e <keypad_get_key_value+0x72>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='A';
 800023a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023e:	4862      	ldr	r0, [pc, #392]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000240:	f001 f968 	bl	8001514 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <keypad_get_key_value+0x72>
 800024a:	2341      	movs	r3, #65	; 0x41
 800024c:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R1_PIN,GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000254:	485b      	ldr	r0, [pc, #364]	; (80003c4 <keypad_get_key_value+0x1e8>)
 8000256:	f001 f974 	bl	8001542 <HAL_GPIO_WritePin>
      
			HAL_GPIO_WritePin(GPIOA,R2_PIN,GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000260:	4858      	ldr	r0, [pc, #352]	; (80003c4 <keypad_get_key_value+0x1e8>)
 8000262:	f001 f96e 	bl	8001542 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000266:	200a      	movs	r0, #10
 8000268:	f000 fea6 	bl	8000fb8 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '4'; 
 800026c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000270:	4855      	ldr	r0, [pc, #340]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000272:	f001 f94f 	bl	8001514 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <keypad_get_key_value+0xa6>
 800027c:	2334      	movs	r3, #52	; 0x34
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e01f      	b.n	80002c2 <keypad_get_key_value+0xe6>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='5';
 8000282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000286:	4850      	ldr	r0, [pc, #320]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000288:	f001 f944 	bl	8001514 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <keypad_get_key_value+0xbc>
 8000292:	2335      	movs	r3, #53	; 0x35
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	e014      	b.n	80002c2 <keypad_get_key_value+0xe6>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='6';
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	484a      	ldr	r0, [pc, #296]	; (80003c8 <keypad_get_key_value+0x1ec>)
 800029e:	f001 f939 	bl	8001514 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d102      	bne.n	80002ae <keypad_get_key_value+0xd2>
 80002a8:	2336      	movs	r3, #54	; 0x36
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	e009      	b.n	80002c2 <keypad_get_key_value+0xe6>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='B';
 80002ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b2:	4845      	ldr	r0, [pc, #276]	; (80003c8 <keypad_get_key_value+0x1ec>)
 80002b4:	f001 f92e 	bl	8001514 <HAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <keypad_get_key_value+0xe6>
 80002be:	2342      	movs	r3, #66	; 0x42
 80002c0:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R2_PIN,GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	483e      	ldr	r0, [pc, #248]	; (80003c4 <keypad_get_key_value+0x1e8>)
 80002ca:	f001 f93a 	bl	8001542 <HAL_GPIO_WritePin>
		
 			HAL_GPIO_WritePin(GPIOA,R3_PIN,GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d4:	483b      	ldr	r0, [pc, #236]	; (80003c4 <keypad_get_key_value+0x1e8>)
 80002d6:	f001 f934 	bl	8001542 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 fe6c 	bl	8000fb8 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C1_PORT,C1_PIN)==0) key = '7'; 
 80002e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e4:	4838      	ldr	r0, [pc, #224]	; (80003c8 <keypad_get_key_value+0x1ec>)
 80002e6:	f001 f915 	bl	8001514 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d102      	bne.n	80002f6 <keypad_get_key_value+0x11a>
 80002f0:	2337      	movs	r3, #55	; 0x37
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	e01f      	b.n	8000336 <keypad_get_key_value+0x15a>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='8';
 80002f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fa:	4833      	ldr	r0, [pc, #204]	; (80003c8 <keypad_get_key_value+0x1ec>)
 80002fc:	f001 f90a 	bl	8001514 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <keypad_get_key_value+0x130>
 8000306:	2338      	movs	r3, #56	; 0x38
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e014      	b.n	8000336 <keypad_get_key_value+0x15a>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='9';
 800030c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000310:	482d      	ldr	r0, [pc, #180]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000312:	f001 f8ff 	bl	8001514 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d102      	bne.n	8000322 <keypad_get_key_value+0x146>
 800031c:	2339      	movs	r3, #57	; 0x39
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	e009      	b.n	8000336 <keypad_get_key_value+0x15a>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='C';
 8000322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000326:	4828      	ldr	r0, [pc, #160]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000328:	f001 f8f4 	bl	8001514 <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d101      	bne.n	8000336 <keypad_get_key_value+0x15a>
 8000332:	2343      	movs	r3, #67	; 0x43
 8000334:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R3_PIN,GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033c:	4821      	ldr	r0, [pc, #132]	; (80003c4 <keypad_get_key_value+0x1e8>)
 800033e:	f001 f900 	bl	8001542 <HAL_GPIO_WritePin>
	
 			HAL_GPIO_WritePin(GPIOA,R4_PIN,GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000348:	481e      	ldr	r0, [pc, #120]	; (80003c4 <keypad_get_key_value+0x1e8>)
 800034a:	f001 f8fa 	bl	8001542 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800034e:	200a      	movs	r0, #10
 8000350:	f000 fe32 	bl	8000fb8 <HAL_Delay>
      if(HAL_GPIO_ReadPin(C4_PORT,C1_PIN)==0) key = '*'; 
 8000354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000358:	481b      	ldr	r0, [pc, #108]	; (80003c8 <keypad_get_key_value+0x1ec>)
 800035a:	f001 f8db 	bl	8001514 <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <keypad_get_key_value+0x18e>
 8000364:	232a      	movs	r3, #42	; 0x2a
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	e01f      	b.n	80003aa <keypad_get_key_value+0x1ce>
      else if(HAL_GPIO_ReadPin(C2_PORT,C2_PIN)==0) key ='0';
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	4816      	ldr	r0, [pc, #88]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000370:	f001 f8d0 	bl	8001514 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d102      	bne.n	8000380 <keypad_get_key_value+0x1a4>
 800037a:	2330      	movs	r3, #48	; 0x30
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	e014      	b.n	80003aa <keypad_get_key_value+0x1ce>
      else if(HAL_GPIO_ReadPin(C3_PORT,C3_PIN)==0) key ='#';
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	4810      	ldr	r0, [pc, #64]	; (80003c8 <keypad_get_key_value+0x1ec>)
 8000386:	f001 f8c5 	bl	8001514 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d102      	bne.n	8000396 <keypad_get_key_value+0x1ba>
 8000390:	2323      	movs	r3, #35	; 0x23
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e009      	b.n	80003aa <keypad_get_key_value+0x1ce>
      else if(HAL_GPIO_ReadPin(C4_PORT,C4_PIN)==0) key ='D';
 8000396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039a:	480b      	ldr	r0, [pc, #44]	; (80003c8 <keypad_get_key_value+0x1ec>)
 800039c:	f001 f8ba 	bl	8001514 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d101      	bne.n	80003aa <keypad_get_key_value+0x1ce>
 80003a6:	2344      	movs	r3, #68	; 0x44
 80003a8:	607b      	str	r3, [r7, #4]
      HAL_GPIO_WritePin(GPIOA,R4_PIN,GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <keypad_get_key_value+0x1e8>)
 80003b2:	f001 f8c6 	bl	8001542 <HAL_GPIO_WritePin>
      
			return key;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	b2db      	uxtb	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010800 	.word	0x40010800
 80003c8:	40010c00 	.word	0x40010c00

080003cc <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80003cc:	b5b0      	push	{r4, r5, r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80003da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80003de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80003e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003e6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80003e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ea:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80003ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003ee:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f80e 	bl	8000422 <Lcd_init>

	return lcd;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	461d      	mov	r5, r3
 800040a:	f107 0410 	add.w	r4, r7, #16
 800040e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000416:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	3728      	adds	r7, #40	; 0x28
 800041e:	46bd      	mov	sp, r7
 8000420:	bdb0      	pop	{r4, r5, r7, pc}

08000422 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7d9b      	ldrb	r3, [r3, #22]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10c      	bne.n	800044c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000432:	2133      	movs	r1, #51	; 0x33
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f87b 	bl	8000530 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800043a:	2132      	movs	r1, #50	; 0x32
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 f877 	bl	8000530 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000442:	2128      	movs	r1, #40	; 0x28
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f873 	bl	8000530 <lcd_write_command>
 800044a:	e003      	b.n	8000454 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800044c:	2138      	movs	r1, #56	; 0x38
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 f86e 	bl	8000530 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000454:	2101      	movs	r1, #1
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f86a 	bl	8000530 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800045c:	210c      	movs	r1, #12
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f866 	bl	8000530 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000464:	2106      	movs	r1, #6
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f000 f862 	bl	8000530 <lcd_write_command>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	4906      	ldr	r1, [pc, #24]	; (80004a0 <Lcd_int+0x2c>)
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fe12 	bl	80020b0 <siprintf>

	Lcd_string(lcd, buffer);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	4619      	mov	r1, r3
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f000 f806 	bl	80004a4 <Lcd_string>
}
 8000498:	bf00      	nop
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	080029bc 	.word	0x080029bc

080004a4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e00a      	b.n	80004ca <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f000 f864 	bl	800058c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	3301      	adds	r3, #1
 80004c8:	73fb      	strb	r3, [r7, #15]
 80004ca:	7bfc      	ldrb	r4, [r7, #15]
 80004cc:	6838      	ldr	r0, [r7, #0]
 80004ce:	f7ff fe3d 	bl	800014c <strlen>
 80004d2:	4603      	mov	r3, r0
 80004d4:	429c      	cmp	r4, r3
 80004d6:	d3ed      	bcc.n	80004b4 <Lcd_string+0x10>
	}
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd90      	pop	{r4, r7, pc}
	...

080004e4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
 80004f0:	4613      	mov	r3, r2
 80004f2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <Lcd_cursor+0x30>)
 80004f8:	5cd2      	ldrb	r2, [r2, r3]
 80004fa:	78bb      	ldrb	r3, [r7, #2]
 80004fc:	4413      	add	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	3b80      	subs	r3, #128	; 0x80
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 f812 	bl	8000530 <lcd_write_command>
	#endif
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08002a08 	.word	0x08002a08

08000518 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000520:	2101      	movs	r1, #1
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f804 	bl	8000530 <lcd_write_command>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f000 fffb 	bl	8001542 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7d9b      	ldrb	r3, [r3, #22]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d111      	bne.n	8000578 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	091b      	lsrs	r3, r3, #4
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2204      	movs	r2, #4
 800055c:	4619      	mov	r1, r3
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f842 	bl	80005e8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	f003 030f 	and.w	r3, r3, #15
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2204      	movs	r2, #4
 800056e:	4619      	mov	r1, r3
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f839 	bl	80005e8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000576:	e005      	b.n	8000584 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2208      	movs	r2, #8
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f832 	bl	80005e8 <lcd_write>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6898      	ldr	r0, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	899b      	ldrh	r3, [r3, #12]
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	f000 ffcd 	bl	8001542 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7d9b      	ldrb	r3, [r3, #22]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d111      	bne.n	80005d4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	091b      	lsrs	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2204      	movs	r2, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f814 	bl	80005e8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2204      	movs	r2, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f80b 	bl	80005e8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80005d2:	e005      	b.n	80005e0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2208      	movs	r2, #8
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f804 	bl	80005e8 <lcd_write>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e019      	b.n	8000632 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	8819      	ldrh	r1, [r3, #0]
 8000616:	78fa      	ldrb	r2, [r7, #3]
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	fa42 f303 	asr.w	r3, r2, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	f000 ff8b 	bl	8001542 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	3301      	adds	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	7bfa      	ldrb	r2, [r7, #15]
 8000634:	78bb      	ldrb	r3, [r7, #2]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3e1      	bcc.n	80005fe <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6918      	ldr	r0, [r3, #16]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8a9b      	ldrh	r3, [r3, #20]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f000 ff7c 	bl	8001542 <HAL_GPIO_WritePin>
	DELAY(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fcb4 	bl	8000fb8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6918      	ldr	r0, [r3, #16]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	8a9b      	ldrh	r3, [r3, #20]
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	f000 ff71 	bl	8001542 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <sayi>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sayi(int k) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e00f      	b.n	8000696 <sayi+0x2e>
		if (dizi[i] == -1) {
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <sayi+0x5c>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000682:	d105      	bne.n	8000690 <sayi+0x28>
			dizi[i] = k;
 8000684:	490f      	ldr	r1, [pc, #60]	; (80006c4 <sayi+0x5c>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800068e:	e005      	b.n	800069c <sayi+0x34>
	for (int i = 0; i < 5; i++) {
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2b04      	cmp	r3, #4
 800069a:	ddec      	ble.n	8000676 <sayi+0xe>
		}
	}
	Lcd_clear(&lcd);
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <sayi+0x60>)
 800069e:	f7ff ff3b 	bl	8000518 <Lcd_clear>
	Lcd_cursor(&lcd, 0, 7);
 80006a2:	2207      	movs	r2, #7
 80006a4:	2100      	movs	r1, #0
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <sayi+0x60>)
 80006a8:	f7ff ff1c 	bl	80004e4 <Lcd_cursor>
	Lcd_int(&lcd, getirSayi());
 80006ac:	f000 f80e 	bl	80006cc <getirSayi>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <sayi+0x60>)
 80006b6:	f7ff fedd 	bl	8000474 <Lcd_int>

}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	200000fc 	.word	0x200000fc

080006cc <getirSayi>:
int getirSayi() {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
	int sayiCarpim = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
	int deger = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
	for (int i = 4; i >= 0; i--) {
 80006da:	2304      	movs	r3, #4
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	e019      	b.n	8000714 <getirSayi+0x48>
		if (dizi[i] != -1) {
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <getirSayi+0x5c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ec:	d00f      	beq.n	800070e <getirSayi+0x42>
			deger += dizi[i] * sayiCarpim;
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <getirSayi+0x5c>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	4413      	add	r3, r2
 8000700:	60bb      	str	r3, [r7, #8]
			sayiCarpim = sayiCarpim * 10;
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
	for (int i = 4; i >= 0; i--) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3b01      	subs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	dae2      	bge.n	80006e0 <getirSayi+0x14>
		}
	}
	return deger;
 800071a:	68bb      	ldr	r3, [r7, #8]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <read_keypad>:
char read_keypad()

{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	key_val = keypad_get_key_value();
 8000730:	f7ff fd54 	bl	80001dc <keypad_get_key_value>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <read_keypad+0x138>)
 800073a:	701a      	strb	r2, [r3, #0]

	if (bul == -1) {
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <read_keypad+0x13c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000744:	f040 8081 	bne.w	800084a <read_keypad+0x11e>
		bul = 0;
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <read_keypad+0x13c>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
		if (key_val == 49) {
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <read_keypad+0x138>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b31      	cmp	r3, #49	; 0x31
 8000754:	d104      	bne.n	8000760 <read_keypad+0x34>

			sayi(1);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff86 	bl	8000668 <sayi>
			return '1';
 800075c:	2331      	movs	r3, #49	; 0x31
 800075e:	e07e      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 50) {
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <read_keypad+0x138>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b32      	cmp	r3, #50	; 0x32
 8000766:	d104      	bne.n	8000772 <read_keypad+0x46>

			sayi(2);
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff ff7d 	bl	8000668 <sayi>
			return '2';
 800076e:	2332      	movs	r3, #50	; 0x32
 8000770:	e075      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 51) {
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <read_keypad+0x138>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b33      	cmp	r3, #51	; 0x33
 8000778:	d104      	bne.n	8000784 <read_keypad+0x58>
			sayi(3);
 800077a:	2003      	movs	r0, #3
 800077c:	f7ff ff74 	bl	8000668 <sayi>
			return '3';
 8000780:	2333      	movs	r3, #51	; 0x33
 8000782:	e06c      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 52) {
 8000784:	4b37      	ldr	r3, [pc, #220]	; (8000864 <read_keypad+0x138>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b34      	cmp	r3, #52	; 0x34
 800078a:	d104      	bne.n	8000796 <read_keypad+0x6a>
			sayi(4);
 800078c:	2004      	movs	r0, #4
 800078e:	f7ff ff6b 	bl	8000668 <sayi>
			return '4';
 8000792:	2334      	movs	r3, #52	; 0x34
 8000794:	e063      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 53) {
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <read_keypad+0x138>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b35      	cmp	r3, #53	; 0x35
 800079c:	d104      	bne.n	80007a8 <read_keypad+0x7c>
			sayi(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f7ff ff62 	bl	8000668 <sayi>
			return '5';
 80007a4:	2335      	movs	r3, #53	; 0x35
 80007a6:	e05a      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 54) {
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <read_keypad+0x138>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b36      	cmp	r3, #54	; 0x36
 80007ae:	d104      	bne.n	80007ba <read_keypad+0x8e>
			sayi(6);
 80007b0:	2006      	movs	r0, #6
 80007b2:	f7ff ff59 	bl	8000668 <sayi>
			return '6';
 80007b6:	2336      	movs	r3, #54	; 0x36
 80007b8:	e051      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 55) {
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <read_keypad+0x138>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b37      	cmp	r3, #55	; 0x37
 80007c0:	d104      	bne.n	80007cc <read_keypad+0xa0>
			sayi(7);
 80007c2:	2007      	movs	r0, #7
 80007c4:	f7ff ff50 	bl	8000668 <sayi>
			return '7';
 80007c8:	2337      	movs	r3, #55	; 0x37
 80007ca:	e048      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 56) {
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <read_keypad+0x138>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b38      	cmp	r3, #56	; 0x38
 80007d2:	d104      	bne.n	80007de <read_keypad+0xb2>
			sayi(8);
 80007d4:	2008      	movs	r0, #8
 80007d6:	f7ff ff47 	bl	8000668 <sayi>
			return '8';
 80007da:	2338      	movs	r3, #56	; 0x38
 80007dc:	e03f      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 58) {
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <read_keypad+0x138>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b3a      	cmp	r3, #58	; 0x3a
 80007e4:	d104      	bne.n	80007f0 <read_keypad+0xc4>
			sayi(9);
 80007e6:	2009      	movs	r0, #9
 80007e8:	f7ff ff3e 	bl	8000668 <sayi>
			return '9';
 80007ec:	2339      	movs	r3, #57	; 0x39
 80007ee:	e036      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 48) {
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <read_keypad+0x138>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b30      	cmp	r3, #48	; 0x30
 80007f6:	d104      	bne.n	8000802 <read_keypad+0xd6>
			sayi(0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff35 	bl	8000668 <sayi>
			return '0';
 80007fe:	2330      	movs	r3, #48	; 0x30
 8000800:	e02d      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 42) {
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <read_keypad+0x138>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b2a      	cmp	r3, #42	; 0x2a
 8000808:	d101      	bne.n	800080e <read_keypad+0xe2>
			return '*';
 800080a:	232a      	movs	r3, #42	; 0x2a
 800080c:	e027      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 35) {
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <read_keypad+0x138>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b23      	cmp	r3, #35	; 0x23
 8000814:	d101      	bne.n	800081a <read_keypad+0xee>
			return '#';
 8000816:	2323      	movs	r3, #35	; 0x23
 8000818:	e021      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 65) {
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <read_keypad+0x138>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b41      	cmp	r3, #65	; 0x41
 8000820:	d101      	bne.n	8000826 <read_keypad+0xfa>
			return 'A';
 8000822:	2341      	movs	r3, #65	; 0x41
 8000824:	e01b      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 66) {
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <read_keypad+0x138>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b42      	cmp	r3, #66	; 0x42
 800082c:	d101      	bne.n	8000832 <read_keypad+0x106>
			return 'B';
 800082e:	2342      	movs	r3, #66	; 0x42
 8000830:	e015      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 67) {
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <read_keypad+0x138>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b43      	cmp	r3, #67	; 0x43
 8000838:	d101      	bne.n	800083e <read_keypad+0x112>
			return 'C';
 800083a:	2343      	movs	r3, #67	; 0x43
 800083c:	e00f      	b.n	800085e <read_keypad+0x132>
		} else if (key_val == 68) {
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <read_keypad+0x138>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b44      	cmp	r3, #68	; 0x44
 8000844:	d10b      	bne.n	800085e <read_keypad+0x132>
			return 'D';
 8000846:	2344      	movs	r3, #68	; 0x44
 8000848:	e009      	b.n	800085e <read_keypad+0x132>
		}
	} else if (key_val == 32) {
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <read_keypad+0x138>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b20      	cmp	r3, #32
 8000850:	d105      	bne.n	800085e <read_keypad+0x132>

		bul = -1;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <read_keypad+0x13c>)
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	601a      	str	r2, [r3, #0]
		return -1;
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	e7ff      	b.n	800085e <read_keypad+0x132>
	}

}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000a4 	.word	0x200000a4
 8000868:	20000014 	.word	0x20000014

0800086c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b094      	sub	sp, #80	; 0x50
 8000870:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000872:	f000 fb3f 	bl	8000ef4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000876:	f000 f8f9 	bl	8000a6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800087a:	f000 f961 	bl	8000b40 <MX_GPIO_Init>
	MX_I2C1_Init();
 800087e:	f000 f931 	bl	8000ae4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000882:	4b6f      	ldr	r3, [pc, #444]	; (8000a40 <main+0x1d4>)
 8000884:	f107 0420 	add.w	r4, r7, #32
 8000888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = { GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11 };
 800088e:	4a6d      	ldr	r2, [pc, #436]	; (8000a44 <main+0x1d8>)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000898:	e883 0003 	stmia.w	r3, {r0, r1}

	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3,
 800089c:	4c6a      	ldr	r4, [pc, #424]	; (8000a48 <main+0x1dc>)
 800089e:	4638      	mov	r0, r7
 80008a0:	f107 0218 	add.w	r2, r7, #24
 80008a4:	f107 0120 	add.w	r1, r7, #32
 80008a8:	2300      	movs	r3, #0
 80008aa:	9303      	str	r3, [sp, #12]
 80008ac:	2308      	movs	r3, #8
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	4b66      	ldr	r3, [pc, #408]	; (8000a4c <main+0x1e0>)
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	2302      	movs	r3, #2
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <main+0x1e0>)
 80008ba:	f7ff fd87 	bl	80003cc <Lcd_create>
 80008be:	4625      	mov	r5, r4
 80008c0:	463c      	mov	r4, r7
 80008c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008ca:	e885 0003 	stmia.w	r5, {r0, r1}
			LCD_4_BIT_MODE);
	Lcd_cursor(&lcd, 0, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2100      	movs	r1, #0
 80008d2:	485d      	ldr	r0, [pc, #372]	; (8000a48 <main+0x1dc>)
 80008d4:	f7ff fe06 	bl	80004e4 <Lcd_cursor>
	Lcd_clear(&lcd);
 80008d8:	485b      	ldr	r0, [pc, #364]	; (8000a48 <main+0x1dc>)
 80008da:	f7ff fe1d 	bl	8000518 <Lcd_clear>
	Lcd_string(&lcd, "LCD");
 80008de:	495c      	ldr	r1, [pc, #368]	; (8000a50 <main+0x1e4>)
 80008e0:	4859      	ldr	r0, [pc, #356]	; (8000a48 <main+0x1dc>)
 80008e2:	f7ff fddf 	bl	80004a4 <Lcd_string>

	Lcd_clear(&lcd);
 80008e6:	4858      	ldr	r0, [pc, #352]	; (8000a48 <main+0x1dc>)
 80008e8:	f7ff fe16 	bl	8000518 <Lcd_clear>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	keypad_init();
 80008ec:	f7ff fc36 	bl	800015c <keypad_init>
	int oldmilim = -1;
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
	int baslatmaturu = -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4854      	ldr	r0, [pc, #336]	; (8000a54 <main+0x1e8>)
 8000902:	f000 fe1e 	bl	8001542 <HAL_GPIO_WritePin>
		 Lcd_string(&lcd, "Gecen miktar:");
		 Lcd_cursor(&lcd, 1, 1);
		 Lcd_string(&lcd,"       ");
		 Lcd_cursor(&lcd, 1, 1);
		 Lcd_int(&lcd,extint0say);*/
		Lcd_cursor(&lcd, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	484f      	ldr	r0, [pc, #316]	; (8000a48 <main+0x1dc>)
 800090c:	f7ff fdea 	bl	80004e4 <Lcd_cursor>
		Lcd_string(&lcd, "Kac mL:");
 8000910:	4951      	ldr	r1, [pc, #324]	; (8000a58 <main+0x1ec>)
 8000912:	484d      	ldr	r0, [pc, #308]	; (8000a48 <main+0x1dc>)
 8000914:	f7ff fdc6 	bl	80004a4 <Lcd_string>
		char keypadvalue = read_keypad();
 8000918:	f7ff ff08 	bl	800072c <read_keypad>
 800091c:	4603      	mov	r3, r0
 800091e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (keypadvalue == 'A') {
 8000922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000926:	2b41      	cmp	r3, #65	; 0x41
 8000928:	d117      	bne.n	800095a <main+0xee>
			baslatmaturu = -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Lcd_clear(&lcd);
 8000930:	4845      	ldr	r0, [pc, #276]	; (8000a48 <main+0x1dc>)
 8000932:	f7ff fdf1 	bl	8000518 <Lcd_clear>
			//Lcd_string(&lcd, "A");

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	4846      	ldr	r0, [pc, #280]	; (8000a54 <main+0x1e8>)
 800093c:	f000 fe01 	bl	8001542 <HAL_GPIO_WritePin>
			Lcd_cursor(&lcd, 0, 7);
 8000940:	2207      	movs	r2, #7
 8000942:	2100      	movs	r1, #0
 8000944:	4840      	ldr	r0, [pc, #256]	; (8000a48 <main+0x1dc>)
 8000946:	f7ff fdcd 	bl	80004e4 <Lcd_cursor>
			Lcd_int(&lcd, getirSayi());
 800094a:	f7ff febf 	bl	80006cc <getirSayi>
 800094e:	4603      	mov	r3, r0
 8000950:	4619      	mov	r1, r3
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <main+0x1dc>)
 8000954:	f7ff fd8e 	bl	8000474 <Lcd_int>
 8000958:	e045      	b.n	80009e6 <main+0x17a>
		} else if (keypadvalue == 'B') {
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800095e:	2b42      	cmp	r3, #66	; 0x42
 8000960:	d116      	bne.n	8000990 <main+0x124>
			Lcd_clear(&lcd);
 8000962:	4839      	ldr	r0, [pc, #228]	; (8000a48 <main+0x1dc>)
 8000964:	f7ff fdd8 	bl	8000518 <Lcd_clear>
			baslatmaturu = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
			//Lcd_string(&lcd, "B");

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4838      	ldr	r0, [pc, #224]	; (8000a54 <main+0x1e8>)
 8000972:	f000 fde6 	bl	8001542 <HAL_GPIO_WritePin>
			Lcd_cursor(&lcd, 0, 7);
 8000976:	2207      	movs	r2, #7
 8000978:	2100      	movs	r1, #0
 800097a:	4833      	ldr	r0, [pc, #204]	; (8000a48 <main+0x1dc>)
 800097c:	f7ff fdb2 	bl	80004e4 <Lcd_cursor>
			Lcd_int(&lcd, getirSayi());
 8000980:	f7ff fea4 	bl	80006cc <getirSayi>
 8000984:	4603      	mov	r3, r0
 8000986:	4619      	mov	r1, r3
 8000988:	482f      	ldr	r0, [pc, #188]	; (8000a48 <main+0x1dc>)
 800098a:	f7ff fd73 	bl	8000474 <Lcd_int>
 800098e:	e02a      	b.n	80009e6 <main+0x17a>
		}

		else if (keypadvalue == '*') {
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000994:	2b2a      	cmp	r3, #42	; 0x2a
 8000996:	d10d      	bne.n	80009b4 <main+0x148>
			Lcd_clear(&lcd);
 8000998:	482b      	ldr	r0, [pc, #172]	; (8000a48 <main+0x1dc>)
 800099a:	f7ff fdbd 	bl	8000518 <Lcd_clear>
			milim = 0;
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <main+0x1f0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	801a      	strh	r2, [r3, #0]
			baslatmaturu = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	4829      	ldr	r0, [pc, #164]	; (8000a54 <main+0x1e8>)
 80009ae:	f000 fdc8 	bl	8001542 <HAL_GPIO_WritePin>
 80009b2:	e018      	b.n	80009e6 <main+0x17a>
		}
		else if (keypadvalue == 'C') {
 80009b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b8:	2b43      	cmp	r3, #67	; 0x43
 80009ba:	d114      	bne.n	80009e6 <main+0x17a>
			Lcd_clear(&lcd);
 80009bc:	4822      	ldr	r0, [pc, #136]	; (8000a48 <main+0x1dc>)
 80009be:	f7ff fdab 	bl	8000518 <Lcd_clear>
			milim=0;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <main+0x1f0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < 5; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80009cc:	e008      	b.n	80009e0 <main+0x174>
				dizi[i] = -1;
 80009ce:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <main+0x1f4>)
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	f04f 31ff 	mov.w	r1, #4294967295
 80009d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < 5; i++) {
 80009da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009dc:	3301      	adds	r3, #1
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
 80009e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	ddf3      	ble.n	80009ce <main+0x162>
			}

		}
		if (baslatmaturu == 1 && milim >= getirSayi()) {
 80009e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10f      	bne.n	8000a0c <main+0x1a0>
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <main+0x1f0>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	461c      	mov	r4, r3
 80009f2:	f7ff fe6b 	bl	80006cc <getirSayi>
 80009f6:	4603      	mov	r3, r0
 80009f8:	429c      	cmp	r4, r3
 80009fa:	db07      	blt.n	8000a0c <main+0x1a0>
			baslatmaturu = -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2110      	movs	r1, #16
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <main+0x1e8>)
 8000a08:	f000 fd9b 	bl	8001542 <HAL_GPIO_WritePin>
		}
		Lcd_cursor(&lcd, 1, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <main+0x1dc>)
 8000a12:	f7ff fd67 	bl	80004e4 <Lcd_cursor>
		Lcd_int(&lcd, milim);
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <main+0x1f0>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <main+0x1dc>)
 8000a1e:	f7ff fd29 	bl	8000474 <Lcd_int>
		if (baslatmaturu == -1)
 8000a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d104      	bne.n	8000a34 <main+0x1c8>
			Lcd_string(&lcd, "   Stop");
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <main+0x1f8>)
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <main+0x1dc>)
 8000a2e:	f7ff fd39 	bl	80004a4 <Lcd_string>
 8000a32:	e768      	b.n	8000906 <main+0x9a>
		else
			Lcd_string(&lcd, "   Start");
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <main+0x1fc>)
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <main+0x1dc>)
 8000a38:	f7ff fd34 	bl	80004a4 <Lcd_string>
	while (1) {
 8000a3c:	e763      	b.n	8000906 <main+0x9a>
 8000a3e:	bf00      	nop
 8000a40:	080029e0 	.word	0x080029e0
 8000a44:	080029f0 	.word	0x080029f0
 8000a48:	200000fc 	.word	0x200000fc
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	080029c0 	.word	0x080029c0
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	080029c4 	.word	0x080029c4
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000000 	.word	0x20000000
 8000a64:	080029cc 	.word	0x080029cc
 8000a68:	080029d4 	.word	0x080029d4

08000a6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2228      	movs	r2, #40	; 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fb10 	bl	80020a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a96:	2310      	movs	r3, #16
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fecc 	bl	8001840 <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x46>
		Error_Handler();
 8000aae:	f000 f8ef 	bl	8000c90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f93a 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x6e>
		Error_Handler();
 8000ad6:	f000 f8db 	bl	8000c90 <Error_Handler>
	}
}
 8000ada:	bf00      	nop
 8000adc:	3740      	adds	r7, #64	; 0x40
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f000 fd49 	bl	80015b8 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b2c:	f000 f8b0 	bl	8000c90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000a8 	.word	0x200000a8
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a48      	ldr	r2, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6c:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a42      	ldr	r2, [pc, #264]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b72:	f043 0320 	orr.w	r3, r3, #32
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0320 	and.w	r3, r3, #32
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a3c      	ldr	r2, [pc, #240]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a36      	ldr	r2, [pc, #216]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x13c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4831      	ldr	r0, [pc, #196]	; (8000c80 <MX_GPIO_Init+0x140>)
 8000bbc:	f000 fcc1 	bl	8001542 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f640 710a 	movw	r1, #3850	; 0xf0a
 8000bc6:	482f      	ldr	r0, [pc, #188]	; (8000c84 <MX_GPIO_Init+0x144>)
 8000bc8:	f000 fcbb 	bl	8001542 <HAL_GPIO_WritePin>
			GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
					| GPIO_PIN_11, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f640 4113 	movw	r1, #3091	; 0xc13
 8000bd2:	482d      	ldr	r0, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x148>)
 8000bd4:	f000 fcb5 	bl	8001542 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_GPIO_Init+0x140>)
 8000bf2:	f000 fb13 	bl	800121c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_GPIO_Init+0x14c>)
 8000bfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x144>)
 8000c0a:	f000 fb07 	bl	800121c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 PA8 PA9
	 PA10 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9
 8000c0e:	f640 730a 	movw	r3, #3850	; 0xf0a
 8000c12:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_10 | GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_GPIO_Init+0x144>)
 8000c28:	f000 faf8 	bl	800121c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB10 PB11
	 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11
 8000c2c:	f640 4313 	movw	r3, #3091	; 0xc13
 8000c30:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <MX_GPIO_Init+0x148>)
 8000c46:	f000 fae9 	bl	800121c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000c4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <MX_GPIO_Init+0x148>)
 8000c60:	f000 fadc 	bl	800121c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2006      	movs	r0, #6
 8000c6a:	f000 faa0 	bl	80011ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c6e:	2006      	movs	r0, #6
 8000c70:	f000 fab9 	bl	80011e6 <HAL_NVIC_EnableIRQ>

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	10110000 	.word	0x10110000

08000c90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_MspInit+0x60>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_MspInit+0x60>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_I2C_MspInit+0x90>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d132      	bne.n	8000d86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <HAL_I2C_MspInit+0x98>)
 8000d4e:	f000 fa65 	bl	800121c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_I2C_MspInit+0x9c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_I2C_MspInit+0x9c>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0x94>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005400 	.word	0x40005400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	40010000 	.word	0x40010000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f8cb 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	//if (pulseCount>1000){


		if(pulseCount>10)
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <EXTI0_IRQHandler+0x38>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b0a      	cmp	r3, #10
 8000dfa:	dd0a      	ble.n	8000e12 <EXTI0_IRQHandler+0x22>
		{

			milim+=28;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <EXTI0_IRQHandler+0x3c>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	331c      	adds	r3, #28
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <EXTI0_IRQHandler+0x3c>)
 8000e06:	801a      	strh	r2, [r3, #0]
			 pulseCount-=10;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <EXTI0_IRQHandler+0x38>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3b0a      	subs	r3, #10
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <EXTI0_IRQHandler+0x38>)
 8000e10:	6013      	str	r3, [r2, #0]
		}

	      //}
	pulseCount++;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <EXTI0_IRQHandler+0x38>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <EXTI0_IRQHandler+0x38>)
 8000e1a:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fba9 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000118 	.word	0x20000118
 8000e2c:	20000114 	.word	0x20000114

08000e30 <_sbrk>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
 8000e60:	f001 f8f4 	bl	800204c <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20002800 	.word	0x20002800
 8000e90:	00000400 	.word	0x00000400
 8000e94:	2000011c 	.word	0x2000011c
 8000e98:	20000138 	.word	0x20000138

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopFillZerobss+0x12>)
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x1a>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:
 8000eb2:	58d4      	ldr	r4, [r2, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:
 8000eb8:	18c4      	adds	r4, r0, r3
 8000eba:	428c      	cmp	r4, r1
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x1e>)
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopFillZerobss+0x22>)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:
 8000eca:	42a2      	cmp	r2, r4
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>
 8000ece:	f7ff ffe5 	bl	8000e9c <SystemInit>
 8000ed2:	f001 f8c1 	bl	8002058 <__libc_init_array>
 8000ed6:	f7ff fcc9 	bl	800086c <main>
 8000eda:	4770      	bx	lr
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000088 	.word	0x20000088
 8000ee4:	08002a60 	.word	0x08002a60
 8000ee8:	20000088 	.word	0x20000088
 8000eec:	20000134 	.word	0x20000134

08000ef0 <ADC1_2_IRQHandler>:
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f947 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fec4 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f95f 	bl	8001202 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f927 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000018 	.word	0x20000018
 8000f78:	20000020 	.word	0x20000020
 8000f7c:	2000001c 	.word	0x2000001c

08000f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000020 	.word	0x20000020
 8000fa0:	20000120 	.word	0x20000120

08000fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000120 	.word	0x20000120

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff0 	bl	8000fa4 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffe0 	bl	8000fa4 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000020 	.word	0x20000020

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <__NVIC_EnableIRQ+0x34>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff90 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff2d 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff42 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff35 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa2 	bl	8001154 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b08b      	sub	sp, #44	; 0x2c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	e161      	b.n	80014f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001230:	2201      	movs	r2, #1
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8150 	bne.w	80014ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a97      	ldr	r2, [pc, #604]	; (80014b0 <HAL_GPIO_Init+0x294>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d05e      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001258:	4a95      	ldr	r2, [pc, #596]	; (80014b0 <HAL_GPIO_Init+0x294>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d875      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800125e:	4a95      	ldr	r2, [pc, #596]	; (80014b4 <HAL_GPIO_Init+0x298>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d058      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001264:	4a93      	ldr	r2, [pc, #588]	; (80014b4 <HAL_GPIO_Init+0x298>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d86f      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800126a:	4a93      	ldr	r2, [pc, #588]	; (80014b8 <HAL_GPIO_Init+0x29c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d052      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001270:	4a91      	ldr	r2, [pc, #580]	; (80014b8 <HAL_GPIO_Init+0x29c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d869      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001276:	4a91      	ldr	r2, [pc, #580]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d04c      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 800127c:	4a8f      	ldr	r2, [pc, #572]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d863      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001282:	4a8f      	ldr	r2, [pc, #572]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d046      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001288:	4a8d      	ldr	r2, [pc, #564]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d85d      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d82a      	bhi.n	80012e8 <HAL_GPIO_Init+0xcc>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d859      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <HAL_GPIO_Init+0x80>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	08001317 	.word	0x08001317
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	08001303 	.word	0x08001303
 80012a8:	08001345 	.word	0x08001345
 80012ac:	0800134b 	.word	0x0800134b
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	0800134b 	.word	0x0800134b
 80012b8:	0800134b 	.word	0x0800134b
 80012bc:	0800134b 	.word	0x0800134b
 80012c0:	0800134b 	.word	0x0800134b
 80012c4:	0800134b 	.word	0x0800134b
 80012c8:	0800134b 	.word	0x0800134b
 80012cc:	0800134b 	.word	0x0800134b
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	0800134b 	.word	0x0800134b
 80012d8:	0800134b 	.word	0x0800134b
 80012dc:	0800134b 	.word	0x0800134b
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800130d 	.word	0x0800130d
 80012e8:	4a76      	ldr	r2, [pc, #472]	; (80014c4 <HAL_GPIO_Init+0x2a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ee:	e02c      	b.n	800134a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e029      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e024      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	3308      	adds	r3, #8
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e01f      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	330c      	adds	r3, #12
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e01a      	b.n	800134c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131e:	2304      	movs	r3, #4
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e013      	b.n	800134c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	611a      	str	r2, [r3, #16]
          break;
 8001336:	e009      	b.n	800134c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	615a      	str	r2, [r3, #20]
          break;
 8001342:	e003      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x130>
          break;
 800134a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d801      	bhi.n	8001356 <HAL_GPIO_Init+0x13a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e001      	b.n	800135a <HAL_GPIO_Init+0x13e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d802      	bhi.n	8001368 <HAL_GPIO_Init+0x14c>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x152>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3b08      	subs	r3, #8
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	210f      	movs	r1, #15
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	6a39      	ldr	r1, [r7, #32]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80a9 	beq.w	80014ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b4:	4a45      	ldr	r2, [pc, #276]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3d      	ldr	r2, [pc, #244]	; (80014d0 <HAL_GPIO_Init+0x2b4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1e0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3c      	ldr	r2, [pc, #240]	; (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <HAL_GPIO_Init+0x2bc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013fc:	2300      	movs	r3, #0
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140e:	492f      	ldr	r1, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	492b      	ldr	r1, [pc, #172]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	4927      	ldr	r1, [pc, #156]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001440:	4013      	ands	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4921      	ldr	r1, [pc, #132]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	491d      	ldr	r1, [pc, #116]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001468:	4013      	ands	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	4917      	ldr	r1, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	608b      	str	r3, [r1, #8]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	4913      	ldr	r1, [pc, #76]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001490:	4013      	ands	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01f      	beq.n	80014e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	490d      	ldr	r1, [pc, #52]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60cb      	str	r3, [r1, #12]
 80014ac:	e01f      	b.n	80014ee <HAL_GPIO_Init+0x2d2>
 80014ae:	bf00      	nop
 80014b0:	10320000 	.word	0x10320000
 80014b4:	10310000 	.word	0x10310000
 80014b8:	10220000 	.word	0x10220000
 80014bc:	10210000 	.word	0x10210000
 80014c0:	10120000 	.word	0x10120000
 80014c4:	10110000 	.word	0x10110000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40010800 	.word	0x40010800
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	4909      	ldr	r1, [pc, #36]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	3301      	adds	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f ae96 	bne.w	8001230 <HAL_GPIO_Init+0x14>
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001558:	887a      	ldrh	r2, [r7, #2]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800155e:	e003      	b.n	8001568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f806 	bl	80015a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e12b      	b.n	8001822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fb8e 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800160a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800161a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800161c:	f000 fce4 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a81      	ldr	r2, [pc, #516]	; (800182c <HAL_I2C_Init+0x274>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d807      	bhi.n	800163c <HAL_I2C_Init+0x84>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a80      	ldr	r2, [pc, #512]	; (8001830 <HAL_I2C_Init+0x278>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e006      	b.n	800164a <HAL_I2C_Init+0x92>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a7d      	ldr	r2, [pc, #500]	; (8001834 <HAL_I2C_Init+0x27c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	bf94      	ite	ls
 8001644:	2301      	movls	r3, #1
 8001646:	2300      	movhi	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0e7      	b.n	8001822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a78      	ldr	r2, [pc, #480]	; (8001838 <HAL_I2C_Init+0x280>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_I2C_Init+0x274>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d802      	bhi.n	800168c <HAL_I2C_Init+0xd4>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	e009      	b.n	80016a0 <HAL_I2C_Init+0xe8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a69      	ldr	r2, [pc, #420]	; (800183c <HAL_I2C_Init+0x284>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	495c      	ldr	r1, [pc, #368]	; (800182c <HAL_I2C_Init+0x274>)
 80016bc:	428b      	cmp	r3, r1
 80016be:	d819      	bhi.n	80016f4 <HAL_I2C_Init+0x13c>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e59      	subs	r1, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016d4:	400b      	ands	r3, r1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <HAL_I2C_Init+0x138>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e59      	subs	r1, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ee:	e051      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e04f      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d111      	bne.n	8001720 <HAL_I2C_Init+0x168>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	440b      	add	r3, r1
 800170a:	fbb0 f3f3 	udiv	r3, r0, r3
 800170e:	3301      	adds	r3, #1
 8001710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e012      	b.n	8001746 <HAL_I2C_Init+0x18e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1e58      	subs	r0, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	0099      	lsls	r1, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x196>
 800174a:	2301      	movs	r3, #1
 800174c:	e022      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10e      	bne.n	8001774 <HAL_I2C_Init+0x1bc>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e58      	subs	r0, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	440b      	add	r3, r1
 8001764:	fbb0 f3f3 	udiv	r3, r0, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001772:	e00f      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e58      	subs	r0, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	0099      	lsls	r1, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6911      	ldr	r1, [r2, #16]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68d2      	ldr	r2, [r2, #12]
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	000186a0 	.word	0x000186a0
 8001830:	001e847f 	.word	0x001e847f
 8001834:	003d08ff 	.word	0x003d08ff
 8001838:	431bde83 	.word	0x431bde83
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e272      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e24c      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb42 	bl	8000fa4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb3e 	bl	8000fa4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e200      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb2e 	bl	8000fa4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fb2a 	bl	8000fa4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1ec      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1c0      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fae3 	bl	8000fa4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fadf 	bl	8000fa4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1a1      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fac2 	bl	8000fa4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fabe 	bl	8000fa4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e180      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff faa2 	bl	8000fa4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa9e 	bl	8000fa4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e160      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fac4 	bl	8002010 <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa88 	bl	8000fa4 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fa84 	bl	8000fa4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e146      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b85      	ldr	r3, [pc, #532]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7e      	ldr	r2, [pc, #504]	; (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fa45 	bl	8000fa4 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fa41 	bl	8000fa4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e103      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x4c8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a69      	ldr	r2, [pc, #420]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a60      	ldr	r2, [pc, #384]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a5d      	ldr	r2, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a5a      	ldr	r2, [pc, #360]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f9f5 	bl	8000fa4 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f9f1 	bl	8000fa4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0b1      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7ff f9df 	bl	8000fa4 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f9db 	bl	8000fa4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e09b      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff f9af 	bl	8000fa4 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f9ab 	bl	8000fa4 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e06d      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4921      	ldr	r1, [pc, #132]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	491b      	ldr	r1, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f97f 	bl	8000fa4 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff f97b 	bl	8000fa4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e03d      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e035      	b.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_RCC_OscConfig+0x4cc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f968 	bl	8000fa4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f964 	bl	8000fa4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e026      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e01e      	b.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e019      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x500>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d0      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4965      	ldr	r1, [pc, #404]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da0:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	494d      	ldr	r1, [pc, #308]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d040      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e073      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4936      	ldr	r1, [pc, #216]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f8b6 	bl	8000fa4 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f8b2 	bl	8000fa4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e053      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d210      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4922      	ldr	r1, [pc, #136]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e032      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4916      	ldr	r1, [pc, #88]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ed2:	f000 f821 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490a      	ldr	r1, [pc, #40]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1cc>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1d0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f814 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08002a0c 	.word	0x08002a0c
 8001f10:	20000018 	.word	0x20000018
 8001f14:	2000001c 	.word	0x2000001c

08001f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b490      	push	{r4, r7}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f20:	1d3c      	adds	r4, r7, #4
 8001f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f28:	f240 2301 	movw	r3, #513	; 0x201
 8001f2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x40>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x46>
 8001f56:	e02b      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	e02b      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3328      	adds	r3, #40	; 0x28
 8001f68:	443b      	add	r3, r7
 8001f6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c5b      	lsrs	r3, r3, #17
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	3328      	adds	r3, #40	; 0x28
 8001f86:	443b      	add	r3, r7
 8001f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	623b      	str	r3, [r7, #32]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fb2:	623b      	str	r3, [r7, #32]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc90      	pop	{r4, r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	080029f8 	.word	0x080029f8
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	007a1200 	.word	0x007a1200
 8001fd0:	003d0900 	.word	0x003d0900

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000018 	.word	0x20000018

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff2 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08002a1c 	.word	0x08002a1c

08002010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <RCC_Delay+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <RCC_Delay+0x38>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800202c:	bf00      	nop
  }
  while (Delay --);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <RCC_Delay+0x1c>
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000018 	.word	0x20000018
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <__errno>:
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <__errno+0x8>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000024 	.word	0x20000024

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	2600      	movs	r6, #0
 800205c:	4d0c      	ldr	r5, [pc, #48]	; (8002090 <__libc_init_array+0x38>)
 800205e:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	f000 fc9c 	bl	80029a4 <_init>
 800206c:	2600      	movs	r6, #0
 800206e:	4d0a      	ldr	r5, [pc, #40]	; (8002098 <__libc_init_array+0x40>)
 8002070:	4c0a      	ldr	r4, [pc, #40]	; (800209c <__libc_init_array+0x44>)
 8002072:	1b64      	subs	r4, r4, r5
 8002074:	10a4      	asrs	r4, r4, #2
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	4798      	blx	r3
 8002082:	3601      	adds	r6, #1
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	4798      	blx	r3
 800208c:	3601      	adds	r6, #1
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	08002a58 	.word	0x08002a58
 8002094:	08002a58 	.word	0x08002a58
 8002098:	08002a58 	.word	0x08002a58
 800209c:	08002a5c 	.word	0x08002a5c

080020a0 <memset>:
 80020a0:	4603      	mov	r3, r0
 80020a2:	4402      	add	r2, r0
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d100      	bne.n	80020aa <memset+0xa>
 80020a8:	4770      	bx	lr
 80020aa:	f803 1b01 	strb.w	r1, [r3], #1
 80020ae:	e7f9      	b.n	80020a4 <memset+0x4>

080020b0 <siprintf>:
 80020b0:	b40e      	push	{r1, r2, r3}
 80020b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020b6:	b500      	push	{lr}
 80020b8:	b09c      	sub	sp, #112	; 0x70
 80020ba:	ab1d      	add	r3, sp, #116	; 0x74
 80020bc:	9002      	str	r0, [sp, #8]
 80020be:	9006      	str	r0, [sp, #24]
 80020c0:	9107      	str	r1, [sp, #28]
 80020c2:	9104      	str	r1, [sp, #16]
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <siprintf+0x38>)
 80020c6:	4909      	ldr	r1, [pc, #36]	; (80020ec <siprintf+0x3c>)
 80020c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020cc:	9105      	str	r1, [sp, #20]
 80020ce:	6800      	ldr	r0, [r0, #0]
 80020d0:	a902      	add	r1, sp, #8
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	f000 f868 	bl	80021a8 <_svfiprintf_r>
 80020d8:	2200      	movs	r2, #0
 80020da:	9b02      	ldr	r3, [sp, #8]
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	b01c      	add	sp, #112	; 0x70
 80020e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80020e4:	b003      	add	sp, #12
 80020e6:	4770      	bx	lr
 80020e8:	20000024 	.word	0x20000024
 80020ec:	ffff0208 	.word	0xffff0208

080020f0 <__ssputs_r>:
 80020f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f4:	688e      	ldr	r6, [r1, #8]
 80020f6:	4682      	mov	sl, r0
 80020f8:	429e      	cmp	r6, r3
 80020fa:	460c      	mov	r4, r1
 80020fc:	4690      	mov	r8, r2
 80020fe:	461f      	mov	r7, r3
 8002100:	d838      	bhi.n	8002174 <__ssputs_r+0x84>
 8002102:	898a      	ldrh	r2, [r1, #12]
 8002104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002108:	d032      	beq.n	8002170 <__ssputs_r+0x80>
 800210a:	6825      	ldr	r5, [r4, #0]
 800210c:	6909      	ldr	r1, [r1, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	eba5 0901 	sub.w	r9, r5, r1
 8002114:	6965      	ldr	r5, [r4, #20]
 8002116:	444b      	add	r3, r9
 8002118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800211c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002120:	106d      	asrs	r5, r5, #1
 8002122:	429d      	cmp	r5, r3
 8002124:	bf38      	it	cc
 8002126:	461d      	movcc	r5, r3
 8002128:	0553      	lsls	r3, r2, #21
 800212a:	d531      	bpl.n	8002190 <__ssputs_r+0xa0>
 800212c:	4629      	mov	r1, r5
 800212e:	f000 fb6f 	bl	8002810 <_malloc_r>
 8002132:	4606      	mov	r6, r0
 8002134:	b950      	cbnz	r0, 800214c <__ssputs_r+0x5c>
 8002136:	230c      	movs	r3, #12
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f8ca 3000 	str.w	r3, [sl]
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	81a3      	strh	r3, [r4, #12]
 8002148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214c:	464a      	mov	r2, r9
 800214e:	6921      	ldr	r1, [r4, #16]
 8002150:	f000 face 	bl	80026f0 <memcpy>
 8002154:	89a3      	ldrh	r3, [r4, #12]
 8002156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	81a3      	strh	r3, [r4, #12]
 8002160:	6126      	str	r6, [r4, #16]
 8002162:	444e      	add	r6, r9
 8002164:	6026      	str	r6, [r4, #0]
 8002166:	463e      	mov	r6, r7
 8002168:	6165      	str	r5, [r4, #20]
 800216a:	eba5 0509 	sub.w	r5, r5, r9
 800216e:	60a5      	str	r5, [r4, #8]
 8002170:	42be      	cmp	r6, r7
 8002172:	d900      	bls.n	8002176 <__ssputs_r+0x86>
 8002174:	463e      	mov	r6, r7
 8002176:	4632      	mov	r2, r6
 8002178:	4641      	mov	r1, r8
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	f000 fac6 	bl	800270c <memmove>
 8002180:	68a3      	ldr	r3, [r4, #8]
 8002182:	2000      	movs	r0, #0
 8002184:	1b9b      	subs	r3, r3, r6
 8002186:	60a3      	str	r3, [r4, #8]
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	4433      	add	r3, r6
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	e7db      	b.n	8002148 <__ssputs_r+0x58>
 8002190:	462a      	mov	r2, r5
 8002192:	f000 fbb1 	bl	80028f8 <_realloc_r>
 8002196:	4606      	mov	r6, r0
 8002198:	2800      	cmp	r0, #0
 800219a:	d1e1      	bne.n	8002160 <__ssputs_r+0x70>
 800219c:	4650      	mov	r0, sl
 800219e:	6921      	ldr	r1, [r4, #16]
 80021a0:	f000 face 	bl	8002740 <_free_r>
 80021a4:	e7c7      	b.n	8002136 <__ssputs_r+0x46>
	...

080021a8 <_svfiprintf_r>:
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	4698      	mov	r8, r3
 80021ae:	898b      	ldrh	r3, [r1, #12]
 80021b0:	4607      	mov	r7, r0
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	460d      	mov	r5, r1
 80021b6:	4614      	mov	r4, r2
 80021b8:	b09d      	sub	sp, #116	; 0x74
 80021ba:	d50e      	bpl.n	80021da <_svfiprintf_r+0x32>
 80021bc:	690b      	ldr	r3, [r1, #16]
 80021be:	b963      	cbnz	r3, 80021da <_svfiprintf_r+0x32>
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	f000 fb25 	bl	8002810 <_malloc_r>
 80021c6:	6028      	str	r0, [r5, #0]
 80021c8:	6128      	str	r0, [r5, #16]
 80021ca:	b920      	cbnz	r0, 80021d6 <_svfiprintf_r+0x2e>
 80021cc:	230c      	movs	r3, #12
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	e0d1      	b.n	800237a <_svfiprintf_r+0x1d2>
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	616b      	str	r3, [r5, #20]
 80021da:	2300      	movs	r3, #0
 80021dc:	9309      	str	r3, [sp, #36]	; 0x24
 80021de:	2320      	movs	r3, #32
 80021e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021e4:	2330      	movs	r3, #48	; 0x30
 80021e6:	f04f 0901 	mov.w	r9, #1
 80021ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002394 <_svfiprintf_r+0x1ec>
 80021f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021f6:	4623      	mov	r3, r4
 80021f8:	469a      	mov	sl, r3
 80021fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021fe:	b10a      	cbz	r2, 8002204 <_svfiprintf_r+0x5c>
 8002200:	2a25      	cmp	r2, #37	; 0x25
 8002202:	d1f9      	bne.n	80021f8 <_svfiprintf_r+0x50>
 8002204:	ebba 0b04 	subs.w	fp, sl, r4
 8002208:	d00b      	beq.n	8002222 <_svfiprintf_r+0x7a>
 800220a:	465b      	mov	r3, fp
 800220c:	4622      	mov	r2, r4
 800220e:	4629      	mov	r1, r5
 8002210:	4638      	mov	r0, r7
 8002212:	f7ff ff6d 	bl	80020f0 <__ssputs_r>
 8002216:	3001      	adds	r0, #1
 8002218:	f000 80aa 	beq.w	8002370 <_svfiprintf_r+0x1c8>
 800221c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800221e:	445a      	add	r2, fp
 8002220:	9209      	str	r2, [sp, #36]	; 0x24
 8002222:	f89a 3000 	ldrb.w	r3, [sl]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80a2 	beq.w	8002370 <_svfiprintf_r+0x1c8>
 800222c:	2300      	movs	r3, #0
 800222e:	f04f 32ff 	mov.w	r2, #4294967295
 8002232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002236:	f10a 0a01 	add.w	sl, sl, #1
 800223a:	9304      	str	r3, [sp, #16]
 800223c:	9307      	str	r3, [sp, #28]
 800223e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002242:	931a      	str	r3, [sp, #104]	; 0x68
 8002244:	4654      	mov	r4, sl
 8002246:	2205      	movs	r2, #5
 8002248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800224c:	4851      	ldr	r0, [pc, #324]	; (8002394 <_svfiprintf_r+0x1ec>)
 800224e:	f000 fa41 	bl	80026d4 <memchr>
 8002252:	9a04      	ldr	r2, [sp, #16]
 8002254:	b9d8      	cbnz	r0, 800228e <_svfiprintf_r+0xe6>
 8002256:	06d0      	lsls	r0, r2, #27
 8002258:	bf44      	itt	mi
 800225a:	2320      	movmi	r3, #32
 800225c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002260:	0711      	lsls	r1, r2, #28
 8002262:	bf44      	itt	mi
 8002264:	232b      	movmi	r3, #43	; 0x2b
 8002266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800226a:	f89a 3000 	ldrb.w	r3, [sl]
 800226e:	2b2a      	cmp	r3, #42	; 0x2a
 8002270:	d015      	beq.n	800229e <_svfiprintf_r+0xf6>
 8002272:	4654      	mov	r4, sl
 8002274:	2000      	movs	r0, #0
 8002276:	f04f 0c0a 	mov.w	ip, #10
 800227a:	9a07      	ldr	r2, [sp, #28]
 800227c:	4621      	mov	r1, r4
 800227e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002282:	3b30      	subs	r3, #48	; 0x30
 8002284:	2b09      	cmp	r3, #9
 8002286:	d94e      	bls.n	8002326 <_svfiprintf_r+0x17e>
 8002288:	b1b0      	cbz	r0, 80022b8 <_svfiprintf_r+0x110>
 800228a:	9207      	str	r2, [sp, #28]
 800228c:	e014      	b.n	80022b8 <_svfiprintf_r+0x110>
 800228e:	eba0 0308 	sub.w	r3, r0, r8
 8002292:	fa09 f303 	lsl.w	r3, r9, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	46a2      	mov	sl, r4
 800229a:	9304      	str	r3, [sp, #16]
 800229c:	e7d2      	b.n	8002244 <_svfiprintf_r+0x9c>
 800229e:	9b03      	ldr	r3, [sp, #12]
 80022a0:	1d19      	adds	r1, r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	9103      	str	r1, [sp, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bfbb      	ittet	lt
 80022aa:	425b      	neglt	r3, r3
 80022ac:	f042 0202 	orrlt.w	r2, r2, #2
 80022b0:	9307      	strge	r3, [sp, #28]
 80022b2:	9307      	strlt	r3, [sp, #28]
 80022b4:	bfb8      	it	lt
 80022b6:	9204      	strlt	r2, [sp, #16]
 80022b8:	7823      	ldrb	r3, [r4, #0]
 80022ba:	2b2e      	cmp	r3, #46	; 0x2e
 80022bc:	d10c      	bne.n	80022d8 <_svfiprintf_r+0x130>
 80022be:	7863      	ldrb	r3, [r4, #1]
 80022c0:	2b2a      	cmp	r3, #42	; 0x2a
 80022c2:	d135      	bne.n	8002330 <_svfiprintf_r+0x188>
 80022c4:	9b03      	ldr	r3, [sp, #12]
 80022c6:	3402      	adds	r4, #2
 80022c8:	1d1a      	adds	r2, r3, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	9203      	str	r2, [sp, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bfb8      	it	lt
 80022d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80022d6:	9305      	str	r3, [sp, #20]
 80022d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002398 <_svfiprintf_r+0x1f0>
 80022dc:	2203      	movs	r2, #3
 80022de:	4650      	mov	r0, sl
 80022e0:	7821      	ldrb	r1, [r4, #0]
 80022e2:	f000 f9f7 	bl	80026d4 <memchr>
 80022e6:	b140      	cbz	r0, 80022fa <_svfiprintf_r+0x152>
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	eba0 000a 	sub.w	r0, r0, sl
 80022ee:	fa03 f000 	lsl.w	r0, r3, r0
 80022f2:	9b04      	ldr	r3, [sp, #16]
 80022f4:	3401      	adds	r4, #1
 80022f6:	4303      	orrs	r3, r0
 80022f8:	9304      	str	r3, [sp, #16]
 80022fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022fe:	2206      	movs	r2, #6
 8002300:	4826      	ldr	r0, [pc, #152]	; (800239c <_svfiprintf_r+0x1f4>)
 8002302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002306:	f000 f9e5 	bl	80026d4 <memchr>
 800230a:	2800      	cmp	r0, #0
 800230c:	d038      	beq.n	8002380 <_svfiprintf_r+0x1d8>
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <_svfiprintf_r+0x1f8>)
 8002310:	bb1b      	cbnz	r3, 800235a <_svfiprintf_r+0x1b2>
 8002312:	9b03      	ldr	r3, [sp, #12]
 8002314:	3307      	adds	r3, #7
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	3308      	adds	r3, #8
 800231c:	9303      	str	r3, [sp, #12]
 800231e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002320:	4433      	add	r3, r6
 8002322:	9309      	str	r3, [sp, #36]	; 0x24
 8002324:	e767      	b.n	80021f6 <_svfiprintf_r+0x4e>
 8002326:	460c      	mov	r4, r1
 8002328:	2001      	movs	r0, #1
 800232a:	fb0c 3202 	mla	r2, ip, r2, r3
 800232e:	e7a5      	b.n	800227c <_svfiprintf_r+0xd4>
 8002330:	2300      	movs	r3, #0
 8002332:	f04f 0c0a 	mov.w	ip, #10
 8002336:	4619      	mov	r1, r3
 8002338:	3401      	adds	r4, #1
 800233a:	9305      	str	r3, [sp, #20]
 800233c:	4620      	mov	r0, r4
 800233e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002342:	3a30      	subs	r2, #48	; 0x30
 8002344:	2a09      	cmp	r2, #9
 8002346:	d903      	bls.n	8002350 <_svfiprintf_r+0x1a8>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0c5      	beq.n	80022d8 <_svfiprintf_r+0x130>
 800234c:	9105      	str	r1, [sp, #20]
 800234e:	e7c3      	b.n	80022d8 <_svfiprintf_r+0x130>
 8002350:	4604      	mov	r4, r0
 8002352:	2301      	movs	r3, #1
 8002354:	fb0c 2101 	mla	r1, ip, r1, r2
 8002358:	e7f0      	b.n	800233c <_svfiprintf_r+0x194>
 800235a:	ab03      	add	r3, sp, #12
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	462a      	mov	r2, r5
 8002360:	4638      	mov	r0, r7
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_svfiprintf_r+0x1fc>)
 8002364:	a904      	add	r1, sp, #16
 8002366:	f3af 8000 	nop.w
 800236a:	1c42      	adds	r2, r0, #1
 800236c:	4606      	mov	r6, r0
 800236e:	d1d6      	bne.n	800231e <_svfiprintf_r+0x176>
 8002370:	89ab      	ldrh	r3, [r5, #12]
 8002372:	065b      	lsls	r3, r3, #25
 8002374:	f53f af2c 	bmi.w	80021d0 <_svfiprintf_r+0x28>
 8002378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800237a:	b01d      	add	sp, #116	; 0x74
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	ab03      	add	r3, sp, #12
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	462a      	mov	r2, r5
 8002386:	4638      	mov	r0, r7
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <_svfiprintf_r+0x1fc>)
 800238a:	a904      	add	r1, sp, #16
 800238c:	f000 f87c 	bl	8002488 <_printf_i>
 8002390:	e7eb      	b.n	800236a <_svfiprintf_r+0x1c2>
 8002392:	bf00      	nop
 8002394:	08002a24 	.word	0x08002a24
 8002398:	08002a2a 	.word	0x08002a2a
 800239c:	08002a2e 	.word	0x08002a2e
 80023a0:	00000000 	.word	0x00000000
 80023a4:	080020f1 	.word	0x080020f1

080023a8 <_printf_common>:
 80023a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ac:	4616      	mov	r6, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	688a      	ldr	r2, [r1, #8]
 80023b2:	690b      	ldr	r3, [r1, #16]
 80023b4:	4607      	mov	r7, r0
 80023b6:	4293      	cmp	r3, r2
 80023b8:	bfb8      	it	lt
 80023ba:	4613      	movlt	r3, r2
 80023bc:	6033      	str	r3, [r6, #0]
 80023be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023c2:	460c      	mov	r4, r1
 80023c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023c8:	b10a      	cbz	r2, 80023ce <_printf_common+0x26>
 80023ca:	3301      	adds	r3, #1
 80023cc:	6033      	str	r3, [r6, #0]
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	0699      	lsls	r1, r3, #26
 80023d2:	bf42      	ittt	mi
 80023d4:	6833      	ldrmi	r3, [r6, #0]
 80023d6:	3302      	addmi	r3, #2
 80023d8:	6033      	strmi	r3, [r6, #0]
 80023da:	6825      	ldr	r5, [r4, #0]
 80023dc:	f015 0506 	ands.w	r5, r5, #6
 80023e0:	d106      	bne.n	80023f0 <_printf_common+0x48>
 80023e2:	f104 0a19 	add.w	sl, r4, #25
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	6832      	ldr	r2, [r6, #0]
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	42ab      	cmp	r3, r5
 80023ee:	dc28      	bgt.n	8002442 <_printf_common+0x9a>
 80023f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023f4:	1e13      	subs	r3, r2, #0
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	bf18      	it	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	0692      	lsls	r2, r2, #26
 80023fe:	d42d      	bmi.n	800245c <_printf_common+0xb4>
 8002400:	4649      	mov	r1, r9
 8002402:	4638      	mov	r0, r7
 8002404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002408:	47c0      	blx	r8
 800240a:	3001      	adds	r0, #1
 800240c:	d020      	beq.n	8002450 <_printf_common+0xa8>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	68e5      	ldr	r5, [r4, #12]
 8002412:	f003 0306 	and.w	r3, r3, #6
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf18      	it	ne
 800241a:	2500      	movne	r5, #0
 800241c:	6832      	ldr	r2, [r6, #0]
 800241e:	f04f 0600 	mov.w	r6, #0
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	bf08      	it	eq
 8002426:	1aad      	subeq	r5, r5, r2
 8002428:	6922      	ldr	r2, [r4, #16]
 800242a:	bf08      	it	eq
 800242c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002430:	4293      	cmp	r3, r2
 8002432:	bfc4      	itt	gt
 8002434:	1a9b      	subgt	r3, r3, r2
 8002436:	18ed      	addgt	r5, r5, r3
 8002438:	341a      	adds	r4, #26
 800243a:	42b5      	cmp	r5, r6
 800243c:	d11a      	bne.n	8002474 <_printf_common+0xcc>
 800243e:	2000      	movs	r0, #0
 8002440:	e008      	b.n	8002454 <_printf_common+0xac>
 8002442:	2301      	movs	r3, #1
 8002444:	4652      	mov	r2, sl
 8002446:	4649      	mov	r1, r9
 8002448:	4638      	mov	r0, r7
 800244a:	47c0      	blx	r8
 800244c:	3001      	adds	r0, #1
 800244e:	d103      	bne.n	8002458 <_printf_common+0xb0>
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002458:	3501      	adds	r5, #1
 800245a:	e7c4      	b.n	80023e6 <_printf_common+0x3e>
 800245c:	2030      	movs	r0, #48	; 0x30
 800245e:	18e1      	adds	r1, r4, r3
 8002460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800246a:	4422      	add	r2, r4
 800246c:	3302      	adds	r3, #2
 800246e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002472:	e7c5      	b.n	8002400 <_printf_common+0x58>
 8002474:	2301      	movs	r3, #1
 8002476:	4622      	mov	r2, r4
 8002478:	4649      	mov	r1, r9
 800247a:	4638      	mov	r0, r7
 800247c:	47c0      	blx	r8
 800247e:	3001      	adds	r0, #1
 8002480:	d0e6      	beq.n	8002450 <_printf_common+0xa8>
 8002482:	3601      	adds	r6, #1
 8002484:	e7d9      	b.n	800243a <_printf_common+0x92>
	...

08002488 <_printf_i>:
 8002488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800248c:	7e0f      	ldrb	r7, [r1, #24]
 800248e:	4691      	mov	r9, r2
 8002490:	2f78      	cmp	r7, #120	; 0x78
 8002492:	4680      	mov	r8, r0
 8002494:	460c      	mov	r4, r1
 8002496:	469a      	mov	sl, r3
 8002498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800249a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800249e:	d807      	bhi.n	80024b0 <_printf_i+0x28>
 80024a0:	2f62      	cmp	r7, #98	; 0x62
 80024a2:	d80a      	bhi.n	80024ba <_printf_i+0x32>
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	f000 80d9 	beq.w	800265c <_printf_i+0x1d4>
 80024aa:	2f58      	cmp	r7, #88	; 0x58
 80024ac:	f000 80a4 	beq.w	80025f8 <_printf_i+0x170>
 80024b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024b8:	e03a      	b.n	8002530 <_printf_i+0xa8>
 80024ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024be:	2b15      	cmp	r3, #21
 80024c0:	d8f6      	bhi.n	80024b0 <_printf_i+0x28>
 80024c2:	a101      	add	r1, pc, #4	; (adr r1, 80024c8 <_printf_i+0x40>)
 80024c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024c8:	08002521 	.word	0x08002521
 80024cc:	08002535 	.word	0x08002535
 80024d0:	080024b1 	.word	0x080024b1
 80024d4:	080024b1 	.word	0x080024b1
 80024d8:	080024b1 	.word	0x080024b1
 80024dc:	080024b1 	.word	0x080024b1
 80024e0:	08002535 	.word	0x08002535
 80024e4:	080024b1 	.word	0x080024b1
 80024e8:	080024b1 	.word	0x080024b1
 80024ec:	080024b1 	.word	0x080024b1
 80024f0:	080024b1 	.word	0x080024b1
 80024f4:	08002643 	.word	0x08002643
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002625 	.word	0x08002625
 8002500:	080024b1 	.word	0x080024b1
 8002504:	080024b1 	.word	0x080024b1
 8002508:	08002665 	.word	0x08002665
 800250c:	080024b1 	.word	0x080024b1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024b1 	.word	0x080024b1
 8002518:	080024b1 	.word	0x080024b1
 800251c:	0800262d 	.word	0x0800262d
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	602a      	str	r2, [r5, #0]
 8002528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800252c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002530:	2301      	movs	r3, #1
 8002532:	e0a4      	b.n	800267e <_printf_i+0x1f6>
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	6829      	ldr	r1, [r5, #0]
 8002538:	0606      	lsls	r6, r0, #24
 800253a:	f101 0304 	add.w	r3, r1, #4
 800253e:	d50a      	bpl.n	8002556 <_printf_i+0xce>
 8002540:	680e      	ldr	r6, [r1, #0]
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	2e00      	cmp	r6, #0
 8002546:	da03      	bge.n	8002550 <_printf_i+0xc8>
 8002548:	232d      	movs	r3, #45	; 0x2d
 800254a:	4276      	negs	r6, r6
 800254c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002550:	230a      	movs	r3, #10
 8002552:	485e      	ldr	r0, [pc, #376]	; (80026cc <_printf_i+0x244>)
 8002554:	e019      	b.n	800258a <_printf_i+0x102>
 8002556:	680e      	ldr	r6, [r1, #0]
 8002558:	f010 0f40 	tst.w	r0, #64	; 0x40
 800255c:	602b      	str	r3, [r5, #0]
 800255e:	bf18      	it	ne
 8002560:	b236      	sxthne	r6, r6
 8002562:	e7ef      	b.n	8002544 <_printf_i+0xbc>
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	6029      	str	r1, [r5, #0]
 800256c:	0601      	lsls	r1, r0, #24
 800256e:	d501      	bpl.n	8002574 <_printf_i+0xec>
 8002570:	681e      	ldr	r6, [r3, #0]
 8002572:	e002      	b.n	800257a <_printf_i+0xf2>
 8002574:	0646      	lsls	r6, r0, #25
 8002576:	d5fb      	bpl.n	8002570 <_printf_i+0xe8>
 8002578:	881e      	ldrh	r6, [r3, #0]
 800257a:	2f6f      	cmp	r7, #111	; 0x6f
 800257c:	bf0c      	ite	eq
 800257e:	2308      	moveq	r3, #8
 8002580:	230a      	movne	r3, #10
 8002582:	4852      	ldr	r0, [pc, #328]	; (80026cc <_printf_i+0x244>)
 8002584:	2100      	movs	r1, #0
 8002586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800258a:	6865      	ldr	r5, [r4, #4]
 800258c:	2d00      	cmp	r5, #0
 800258e:	bfa8      	it	ge
 8002590:	6821      	ldrge	r1, [r4, #0]
 8002592:	60a5      	str	r5, [r4, #8]
 8002594:	bfa4      	itt	ge
 8002596:	f021 0104 	bicge.w	r1, r1, #4
 800259a:	6021      	strge	r1, [r4, #0]
 800259c:	b90e      	cbnz	r6, 80025a2 <_printf_i+0x11a>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d04d      	beq.n	800263e <_printf_i+0x1b6>
 80025a2:	4615      	mov	r5, r2
 80025a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80025a8:	fb03 6711 	mls	r7, r3, r1, r6
 80025ac:	5dc7      	ldrb	r7, [r0, r7]
 80025ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025b2:	4637      	mov	r7, r6
 80025b4:	42bb      	cmp	r3, r7
 80025b6:	460e      	mov	r6, r1
 80025b8:	d9f4      	bls.n	80025a4 <_printf_i+0x11c>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d10b      	bne.n	80025d6 <_printf_i+0x14e>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	07de      	lsls	r6, r3, #31
 80025c2:	d508      	bpl.n	80025d6 <_printf_i+0x14e>
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	6861      	ldr	r1, [r4, #4]
 80025c8:	4299      	cmp	r1, r3
 80025ca:	bfde      	ittt	le
 80025cc:	2330      	movle	r3, #48	; 0x30
 80025ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025d6:	1b52      	subs	r2, r2, r5
 80025d8:	6122      	str	r2, [r4, #16]
 80025da:	464b      	mov	r3, r9
 80025dc:	4621      	mov	r1, r4
 80025de:	4640      	mov	r0, r8
 80025e0:	f8cd a000 	str.w	sl, [sp]
 80025e4:	aa03      	add	r2, sp, #12
 80025e6:	f7ff fedf 	bl	80023a8 <_printf_common>
 80025ea:	3001      	adds	r0, #1
 80025ec:	d14c      	bne.n	8002688 <_printf_i+0x200>
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	b004      	add	sp, #16
 80025f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f8:	4834      	ldr	r0, [pc, #208]	; (80026cc <_printf_i+0x244>)
 80025fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025fe:	6829      	ldr	r1, [r5, #0]
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	f851 6b04 	ldr.w	r6, [r1], #4
 8002606:	6029      	str	r1, [r5, #0]
 8002608:	061d      	lsls	r5, r3, #24
 800260a:	d514      	bpl.n	8002636 <_printf_i+0x1ae>
 800260c:	07df      	lsls	r7, r3, #31
 800260e:	bf44      	itt	mi
 8002610:	f043 0320 	orrmi.w	r3, r3, #32
 8002614:	6023      	strmi	r3, [r4, #0]
 8002616:	b91e      	cbnz	r6, 8002620 <_printf_i+0x198>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f023 0320 	bic.w	r3, r3, #32
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	2310      	movs	r3, #16
 8002622:	e7af      	b.n	8002584 <_printf_i+0xfc>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	6023      	str	r3, [r4, #0]
 800262c:	2378      	movs	r3, #120	; 0x78
 800262e:	4828      	ldr	r0, [pc, #160]	; (80026d0 <_printf_i+0x248>)
 8002630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002634:	e7e3      	b.n	80025fe <_printf_i+0x176>
 8002636:	0659      	lsls	r1, r3, #25
 8002638:	bf48      	it	mi
 800263a:	b2b6      	uxthmi	r6, r6
 800263c:	e7e6      	b.n	800260c <_printf_i+0x184>
 800263e:	4615      	mov	r5, r2
 8002640:	e7bb      	b.n	80025ba <_printf_i+0x132>
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	6826      	ldr	r6, [r4, #0]
 8002646:	1d18      	adds	r0, r3, #4
 8002648:	6961      	ldr	r1, [r4, #20]
 800264a:	6028      	str	r0, [r5, #0]
 800264c:	0635      	lsls	r5, r6, #24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	d501      	bpl.n	8002656 <_printf_i+0x1ce>
 8002652:	6019      	str	r1, [r3, #0]
 8002654:	e002      	b.n	800265c <_printf_i+0x1d4>
 8002656:	0670      	lsls	r0, r6, #25
 8002658:	d5fb      	bpl.n	8002652 <_printf_i+0x1ca>
 800265a:	8019      	strh	r1, [r3, #0]
 800265c:	2300      	movs	r3, #0
 800265e:	4615      	mov	r5, r2
 8002660:	6123      	str	r3, [r4, #16]
 8002662:	e7ba      	b.n	80025da <_printf_i+0x152>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	1d1a      	adds	r2, r3, #4
 800266a:	602a      	str	r2, [r5, #0]
 800266c:	681d      	ldr	r5, [r3, #0]
 800266e:	6862      	ldr	r2, [r4, #4]
 8002670:	4628      	mov	r0, r5
 8002672:	f000 f82f 	bl	80026d4 <memchr>
 8002676:	b108      	cbz	r0, 800267c <_printf_i+0x1f4>
 8002678:	1b40      	subs	r0, r0, r5
 800267a:	6060      	str	r0, [r4, #4]
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	6123      	str	r3, [r4, #16]
 8002680:	2300      	movs	r3, #0
 8002682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002686:	e7a8      	b.n	80025da <_printf_i+0x152>
 8002688:	462a      	mov	r2, r5
 800268a:	4649      	mov	r1, r9
 800268c:	4640      	mov	r0, r8
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	47d0      	blx	sl
 8002692:	3001      	adds	r0, #1
 8002694:	d0ab      	beq.n	80025ee <_printf_i+0x166>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	079b      	lsls	r3, r3, #30
 800269a:	d413      	bmi.n	80026c4 <_printf_i+0x23c>
 800269c:	68e0      	ldr	r0, [r4, #12]
 800269e:	9b03      	ldr	r3, [sp, #12]
 80026a0:	4298      	cmp	r0, r3
 80026a2:	bfb8      	it	lt
 80026a4:	4618      	movlt	r0, r3
 80026a6:	e7a4      	b.n	80025f2 <_printf_i+0x16a>
 80026a8:	2301      	movs	r3, #1
 80026aa:	4632      	mov	r2, r6
 80026ac:	4649      	mov	r1, r9
 80026ae:	4640      	mov	r0, r8
 80026b0:	47d0      	blx	sl
 80026b2:	3001      	adds	r0, #1
 80026b4:	d09b      	beq.n	80025ee <_printf_i+0x166>
 80026b6:	3501      	adds	r5, #1
 80026b8:	68e3      	ldr	r3, [r4, #12]
 80026ba:	9903      	ldr	r1, [sp, #12]
 80026bc:	1a5b      	subs	r3, r3, r1
 80026be:	42ab      	cmp	r3, r5
 80026c0:	dcf2      	bgt.n	80026a8 <_printf_i+0x220>
 80026c2:	e7eb      	b.n	800269c <_printf_i+0x214>
 80026c4:	2500      	movs	r5, #0
 80026c6:	f104 0619 	add.w	r6, r4, #25
 80026ca:	e7f5      	b.n	80026b8 <_printf_i+0x230>
 80026cc:	08002a35 	.word	0x08002a35
 80026d0:	08002a46 	.word	0x08002a46

080026d4 <memchr>:
 80026d4:	4603      	mov	r3, r0
 80026d6:	b510      	push	{r4, lr}
 80026d8:	b2c9      	uxtb	r1, r1
 80026da:	4402      	add	r2, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	d101      	bne.n	80026e6 <memchr+0x12>
 80026e2:	2000      	movs	r0, #0
 80026e4:	e003      	b.n	80026ee <memchr+0x1a>
 80026e6:	7804      	ldrb	r4, [r0, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	428c      	cmp	r4, r1
 80026ec:	d1f6      	bne.n	80026dc <memchr+0x8>
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <memcpy>:
 80026f0:	440a      	add	r2, r1
 80026f2:	4291      	cmp	r1, r2
 80026f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80026f8:	d100      	bne.n	80026fc <memcpy+0xc>
 80026fa:	4770      	bx	lr
 80026fc:	b510      	push	{r4, lr}
 80026fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002702:	4291      	cmp	r1, r2
 8002704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002708:	d1f9      	bne.n	80026fe <memcpy+0xe>
 800270a:	bd10      	pop	{r4, pc}

0800270c <memmove>:
 800270c:	4288      	cmp	r0, r1
 800270e:	b510      	push	{r4, lr}
 8002710:	eb01 0402 	add.w	r4, r1, r2
 8002714:	d902      	bls.n	800271c <memmove+0x10>
 8002716:	4284      	cmp	r4, r0
 8002718:	4623      	mov	r3, r4
 800271a:	d807      	bhi.n	800272c <memmove+0x20>
 800271c:	1e43      	subs	r3, r0, #1
 800271e:	42a1      	cmp	r1, r4
 8002720:	d008      	beq.n	8002734 <memmove+0x28>
 8002722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800272a:	e7f8      	b.n	800271e <memmove+0x12>
 800272c:	4601      	mov	r1, r0
 800272e:	4402      	add	r2, r0
 8002730:	428a      	cmp	r2, r1
 8002732:	d100      	bne.n	8002736 <memmove+0x2a>
 8002734:	bd10      	pop	{r4, pc}
 8002736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800273a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800273e:	e7f7      	b.n	8002730 <memmove+0x24>

08002740 <_free_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4605      	mov	r5, r0
 8002744:	2900      	cmp	r1, #0
 8002746:	d040      	beq.n	80027ca <_free_r+0x8a>
 8002748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800274c:	1f0c      	subs	r4, r1, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	18e4      	addlt	r4, r4, r3
 8002754:	f000 f910 	bl	8002978 <__malloc_lock>
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <_free_r+0x8c>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	b933      	cbnz	r3, 800276c <_free_r+0x2c>
 800275e:	6063      	str	r3, [r4, #4]
 8002760:	6014      	str	r4, [r2, #0]
 8002762:	4628      	mov	r0, r5
 8002764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002768:	f000 b90c 	b.w	8002984 <__malloc_unlock>
 800276c:	42a3      	cmp	r3, r4
 800276e:	d908      	bls.n	8002782 <_free_r+0x42>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	1821      	adds	r1, r4, r0
 8002774:	428b      	cmp	r3, r1
 8002776:	bf01      	itttt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	1809      	addeq	r1, r1, r0
 800277e:	6021      	streq	r1, [r4, #0]
 8002780:	e7ed      	b.n	800275e <_free_r+0x1e>
 8002782:	461a      	mov	r2, r3
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b10b      	cbz	r3, 800278c <_free_r+0x4c>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d9fa      	bls.n	8002782 <_free_r+0x42>
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	1850      	adds	r0, r2, r1
 8002790:	42a0      	cmp	r0, r4
 8002792:	d10b      	bne.n	80027ac <_free_r+0x6c>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	4401      	add	r1, r0
 8002798:	1850      	adds	r0, r2, r1
 800279a:	4283      	cmp	r3, r0
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	d1e0      	bne.n	8002762 <_free_r+0x22>
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4401      	add	r1, r0
 80027a6:	6011      	str	r1, [r2, #0]
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	e7da      	b.n	8002762 <_free_r+0x22>
 80027ac:	d902      	bls.n	80027b4 <_free_r+0x74>
 80027ae:	230c      	movs	r3, #12
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	e7d6      	b.n	8002762 <_free_r+0x22>
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	1821      	adds	r1, r4, r0
 80027b8:	428b      	cmp	r3, r1
 80027ba:	bf01      	itttt	eq
 80027bc:	6819      	ldreq	r1, [r3, #0]
 80027be:	685b      	ldreq	r3, [r3, #4]
 80027c0:	1809      	addeq	r1, r1, r0
 80027c2:	6021      	streq	r1, [r4, #0]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	6054      	str	r4, [r2, #4]
 80027c8:	e7cb      	b.n	8002762 <_free_r+0x22>
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	20000124 	.word	0x20000124

080027d0 <sbrk_aligned>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4e0e      	ldr	r6, [pc, #56]	; (800280c <sbrk_aligned+0x3c>)
 80027d4:	460c      	mov	r4, r1
 80027d6:	6831      	ldr	r1, [r6, #0]
 80027d8:	4605      	mov	r5, r0
 80027da:	b911      	cbnz	r1, 80027e2 <sbrk_aligned+0x12>
 80027dc:	f000 f8bc 	bl	8002958 <_sbrk_r>
 80027e0:	6030      	str	r0, [r6, #0]
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f000 f8b7 	bl	8002958 <_sbrk_r>
 80027ea:	1c43      	adds	r3, r0, #1
 80027ec:	d00a      	beq.n	8002804 <sbrk_aligned+0x34>
 80027ee:	1cc4      	adds	r4, r0, #3
 80027f0:	f024 0403 	bic.w	r4, r4, #3
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d007      	beq.n	8002808 <sbrk_aligned+0x38>
 80027f8:	1a21      	subs	r1, r4, r0
 80027fa:	4628      	mov	r0, r5
 80027fc:	f000 f8ac 	bl	8002958 <_sbrk_r>
 8002800:	3001      	adds	r0, #1
 8002802:	d101      	bne.n	8002808 <sbrk_aligned+0x38>
 8002804:	f04f 34ff 	mov.w	r4, #4294967295
 8002808:	4620      	mov	r0, r4
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	20000128 	.word	0x20000128

08002810 <_malloc_r>:
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002814:	1ccd      	adds	r5, r1, #3
 8002816:	f025 0503 	bic.w	r5, r5, #3
 800281a:	3508      	adds	r5, #8
 800281c:	2d0c      	cmp	r5, #12
 800281e:	bf38      	it	cc
 8002820:	250c      	movcc	r5, #12
 8002822:	2d00      	cmp	r5, #0
 8002824:	4607      	mov	r7, r0
 8002826:	db01      	blt.n	800282c <_malloc_r+0x1c>
 8002828:	42a9      	cmp	r1, r5
 800282a:	d905      	bls.n	8002838 <_malloc_r+0x28>
 800282c:	230c      	movs	r3, #12
 800282e:	2600      	movs	r6, #0
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4630      	mov	r0, r6
 8002834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002838:	4e2e      	ldr	r6, [pc, #184]	; (80028f4 <_malloc_r+0xe4>)
 800283a:	f000 f89d 	bl	8002978 <__malloc_lock>
 800283e:	6833      	ldr	r3, [r6, #0]
 8002840:	461c      	mov	r4, r3
 8002842:	bb34      	cbnz	r4, 8002892 <_malloc_r+0x82>
 8002844:	4629      	mov	r1, r5
 8002846:	4638      	mov	r0, r7
 8002848:	f7ff ffc2 	bl	80027d0 <sbrk_aligned>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	4604      	mov	r4, r0
 8002850:	d14d      	bne.n	80028ee <_malloc_r+0xde>
 8002852:	6834      	ldr	r4, [r6, #0]
 8002854:	4626      	mov	r6, r4
 8002856:	2e00      	cmp	r6, #0
 8002858:	d140      	bne.n	80028dc <_malloc_r+0xcc>
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	4631      	mov	r1, r6
 800285e:	4638      	mov	r0, r7
 8002860:	eb04 0803 	add.w	r8, r4, r3
 8002864:	f000 f878 	bl	8002958 <_sbrk_r>
 8002868:	4580      	cmp	r8, r0
 800286a:	d13a      	bne.n	80028e2 <_malloc_r+0xd2>
 800286c:	6821      	ldr	r1, [r4, #0]
 800286e:	3503      	adds	r5, #3
 8002870:	1a6d      	subs	r5, r5, r1
 8002872:	f025 0503 	bic.w	r5, r5, #3
 8002876:	3508      	adds	r5, #8
 8002878:	2d0c      	cmp	r5, #12
 800287a:	bf38      	it	cc
 800287c:	250c      	movcc	r5, #12
 800287e:	4638      	mov	r0, r7
 8002880:	4629      	mov	r1, r5
 8002882:	f7ff ffa5 	bl	80027d0 <sbrk_aligned>
 8002886:	3001      	adds	r0, #1
 8002888:	d02b      	beq.n	80028e2 <_malloc_r+0xd2>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	442b      	add	r3, r5
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	e00e      	b.n	80028b0 <_malloc_r+0xa0>
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	1b52      	subs	r2, r2, r5
 8002896:	d41e      	bmi.n	80028d6 <_malloc_r+0xc6>
 8002898:	2a0b      	cmp	r2, #11
 800289a:	d916      	bls.n	80028ca <_malloc_r+0xba>
 800289c:	1961      	adds	r1, r4, r5
 800289e:	42a3      	cmp	r3, r4
 80028a0:	6025      	str	r5, [r4, #0]
 80028a2:	bf18      	it	ne
 80028a4:	6059      	strne	r1, [r3, #4]
 80028a6:	6863      	ldr	r3, [r4, #4]
 80028a8:	bf08      	it	eq
 80028aa:	6031      	streq	r1, [r6, #0]
 80028ac:	5162      	str	r2, [r4, r5]
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	4638      	mov	r0, r7
 80028b2:	f104 060b 	add.w	r6, r4, #11
 80028b6:	f000 f865 	bl	8002984 <__malloc_unlock>
 80028ba:	f026 0607 	bic.w	r6, r6, #7
 80028be:	1d23      	adds	r3, r4, #4
 80028c0:	1af2      	subs	r2, r6, r3
 80028c2:	d0b6      	beq.n	8002832 <_malloc_r+0x22>
 80028c4:	1b9b      	subs	r3, r3, r6
 80028c6:	50a3      	str	r3, [r4, r2]
 80028c8:	e7b3      	b.n	8002832 <_malloc_r+0x22>
 80028ca:	6862      	ldr	r2, [r4, #4]
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	bf0c      	ite	eq
 80028d0:	6032      	streq	r2, [r6, #0]
 80028d2:	605a      	strne	r2, [r3, #4]
 80028d4:	e7ec      	b.n	80028b0 <_malloc_r+0xa0>
 80028d6:	4623      	mov	r3, r4
 80028d8:	6864      	ldr	r4, [r4, #4]
 80028da:	e7b2      	b.n	8002842 <_malloc_r+0x32>
 80028dc:	4634      	mov	r4, r6
 80028de:	6876      	ldr	r6, [r6, #4]
 80028e0:	e7b9      	b.n	8002856 <_malloc_r+0x46>
 80028e2:	230c      	movs	r3, #12
 80028e4:	4638      	mov	r0, r7
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	f000 f84c 	bl	8002984 <__malloc_unlock>
 80028ec:	e7a1      	b.n	8002832 <_malloc_r+0x22>
 80028ee:	6025      	str	r5, [r4, #0]
 80028f0:	e7de      	b.n	80028b0 <_malloc_r+0xa0>
 80028f2:	bf00      	nop
 80028f4:	20000124 	.word	0x20000124

080028f8 <_realloc_r>:
 80028f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fc:	4680      	mov	r8, r0
 80028fe:	4614      	mov	r4, r2
 8002900:	460e      	mov	r6, r1
 8002902:	b921      	cbnz	r1, 800290e <_realloc_r+0x16>
 8002904:	4611      	mov	r1, r2
 8002906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800290a:	f7ff bf81 	b.w	8002810 <_malloc_r>
 800290e:	b92a      	cbnz	r2, 800291c <_realloc_r+0x24>
 8002910:	f7ff ff16 	bl	8002740 <_free_r>
 8002914:	4625      	mov	r5, r4
 8002916:	4628      	mov	r0, r5
 8002918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800291c:	f000 f838 	bl	8002990 <_malloc_usable_size_r>
 8002920:	4284      	cmp	r4, r0
 8002922:	4607      	mov	r7, r0
 8002924:	d802      	bhi.n	800292c <_realloc_r+0x34>
 8002926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800292a:	d812      	bhi.n	8002952 <_realloc_r+0x5a>
 800292c:	4621      	mov	r1, r4
 800292e:	4640      	mov	r0, r8
 8002930:	f7ff ff6e 	bl	8002810 <_malloc_r>
 8002934:	4605      	mov	r5, r0
 8002936:	2800      	cmp	r0, #0
 8002938:	d0ed      	beq.n	8002916 <_realloc_r+0x1e>
 800293a:	42bc      	cmp	r4, r7
 800293c:	4622      	mov	r2, r4
 800293e:	4631      	mov	r1, r6
 8002940:	bf28      	it	cs
 8002942:	463a      	movcs	r2, r7
 8002944:	f7ff fed4 	bl	80026f0 <memcpy>
 8002948:	4631      	mov	r1, r6
 800294a:	4640      	mov	r0, r8
 800294c:	f7ff fef8 	bl	8002740 <_free_r>
 8002950:	e7e1      	b.n	8002916 <_realloc_r+0x1e>
 8002952:	4635      	mov	r5, r6
 8002954:	e7df      	b.n	8002916 <_realloc_r+0x1e>
	...

08002958 <_sbrk_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	2300      	movs	r3, #0
 800295c:	4d05      	ldr	r5, [pc, #20]	; (8002974 <_sbrk_r+0x1c>)
 800295e:	4604      	mov	r4, r0
 8002960:	4608      	mov	r0, r1
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	f7fe fa64 	bl	8000e30 <_sbrk>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_sbrk_r+0x1a>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_sbrk_r+0x1a>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	2000012c 	.word	0x2000012c

08002978 <__malloc_lock>:
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <__malloc_lock+0x8>)
 800297a:	f000 b811 	b.w	80029a0 <__retarget_lock_acquire_recursive>
 800297e:	bf00      	nop
 8002980:	20000130 	.word	0x20000130

08002984 <__malloc_unlock>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__malloc_unlock+0x8>)
 8002986:	f000 b80c 	b.w	80029a2 <__retarget_lock_release_recursive>
 800298a:	bf00      	nop
 800298c:	20000130 	.word	0x20000130

08002990 <_malloc_usable_size_r>:
 8002990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002994:	1f18      	subs	r0, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	bfbc      	itt	lt
 800299a:	580b      	ldrlt	r3, [r1, r0]
 800299c:	18c0      	addlt	r0, r0, r3
 800299e:	4770      	bx	lr

080029a0 <__retarget_lock_acquire_recursive>:
 80029a0:	4770      	bx	lr

080029a2 <__retarget_lock_release_recursive>:
 80029a2:	4770      	bx	lr

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
